// src/pages/InteractiveSearchPage.jsx (Final Version with Model Selection)
import { useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import AnalysisModal from '../components/AnalysisModal';

function InteractiveSearchPage() {
  const { filename } = useParams();
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  
  // --- NEW STATE FOR MODEL SELECTION ---
  const [selectedModel, setSelectedModel] = useState('all-MiniLM-L6-v2');
  const [modelUsedForResults, setModelUsedForResults] = useState('');

  // --- MODAL STATE (unchanged) ---
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedText, setSelectedText] = useState('');
  const [modalContent, setModalContent] = useState(null);

  const handleAnalyzeClick = async (chunkText) => {
    setIsModalOpen(true);
    setModalContent(null);
    setSelectedText(chunkText);
    try {
      const response = await axios.post('http://localhost:8000/analyze/', {
        text: chunkText,
        tasks: ["ner", "keywords", "summary"]
      });
      setModalContent({ data: response.data, originalText: chunkText });
    } catch (err) {
      console.error("Chunk analysis failed:", err);
      setModalContent({ error: "Failed to analyze chunk." });
    }
  };

  const handleSearch = async (event) => {
    event.preventDefault();
    if (!query.trim()) {
      setError('Please enter a query.');
      return;
    }
    
    setIsLoading(true);
    setError('');
    setResults([]);
    setModelUsedForResults('');

    try {
      // --- UPDATED API CALL ---
      // We now pass the selectedModel as the 'model_name' parameter
      const response = await axios.get(`http://localhost:8000/search/${filename}`, {
        params: { 
          query: query,
          model_name: selectedModel 
        }
      });
      setResults(response.data.results);
      setModelUsedForResults(response.data.model_used); // Store which model was used
    } catch (err) {
      console.error("Search failed:", err);
      setError(err.response?.data?.detail || 'An error occurred during search.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="w-full flex flex-col space-y-8">
      {/* --- SEARCH CONTROLS SECTION --- */}
      <div className="bg-slate-800/80 backdrop-blur-sm shadow-xl rounded-2xl p-6">
        <form onSubmit={handleSearch} className="flex flex-col md:flex-row gap-4">
          <input
            type="text"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Ask a question about your document..."
            className="flex-grow bg-slate-700 text-white placeholder-slate-400 p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
          />
          
          {/* --- NEW DROPDOWN MENU --- */}
          <select 
            value={selectedModel}
            onChange={(e) => setSelectedModel(e.target.value)}
            className="bg-slate-700 text-white p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-cyan-500"
          >
            <option value="all-MiniLM-L6-v2">Fast Model</option>
            <option value="all-mpnet-base-v2">High Quality Model</option>
          </select>

          <button
            type="submit"
            disabled={isLoading}
            className="bg-cyan-600 hover:bg-cyan-700 disabled:bg-slate-500 text-white font-bold py-3 px-4 rounded-lg transition"
          >
            {isLoading ? 'Searching...' : 'Search'}
          </button>
        </form>
      </div>

      {/* --- RESULTS SECTION --- */}
      <div className="bg-slate-800/80 backdrop-blur-sm shadow-lg rounded-lg p-6 min-h-[400px]">
        {modelUsedForResults && (
            <p className="text-xs text-slate-400 text-center mb-4">
                Results generated by: <span className="font-mono text-cyan-400">{modelUsedForResults}</span>
            </p>
        )}

        {error && <p className="text-red-400 text-center">{error}</p>}
        {!error && results.length === 0 && !isLoading && (
          <p className="text-slate-400 text-center">Your search results will appear here.</p>
        )}
        {isLoading && <p className="text-cyan-400 text-center">Searching for answers... The 'High Quality Model' may take a few seconds.</p>}
        
        <div className="space-y-4">
          {results.map((result, index) => (
            <div key={index} className="bg-slate-700/50 p-4 rounded-lg shadow">
              <p className="text-slate-300">{result.chunk}</p>
              <div className="flex justify-between items-center mt-3">
                <p className="text-xs text-cyan-400 font-mono">
                  Relevance: {result.score.toFixed(4)}
                </p>
                <button 
                  onClick={() => handleAnalyzeClick(result.chunk)}
                  className="bg-cyan-700 hover:bg-cyan-600 text-white text-xs font-bold py-1 px-3 rounded-full transition"
                >
                  Analyze Chunk
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <AnalysisModal 
        isOpen={isModalOpen} 
        onClose={() => setIsModalOpen(false)} 
        analysisData={modalContent?.data}
        originalText={selectedText}
        error={modalContent?.error}
      />
    </div>
  );
}

export default InteractiveSearchPage;